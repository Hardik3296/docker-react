# Whenever running dicker we require super user permissions
sudo: required
language: generic
# Telling Travis CI what needs to be pre installed
services:
    - docker
# Steps to take place before the tests are run
before_install:
    - docker build -t hardik3296/docker-react -f Dockerfile.dev .
# Series of commands to be executed when running the tests
script:
    - docker run -e CI=true hardik3296/docker-react npm run test -- --coverage
# Defining the settings to deploy the application after the testing is successful
# deploy: 
    # Travis CI is pre cofigured with some of the popular hosting service providers
    # therefore only the name will suffice
#    provider: elasticbeanstalk
    # The region where the elasticbeanstalk instance was created on AWS
#    region: "us-west-2"
    # Name of the app you used while creating the AWS service
#    app: "docker-react"
    # Name of the environment created by default
#    env : "Docker-react-env"
    # Name of the bucket that is automaticallly for the elastic beanstalk service
#    bucket_name: "elasticbeanstalke-<region>-ID"
    # It is basically the path of file inside the S3 service which is exactly the name of the app
    # This file only gets created after the first deployment so it may not be visible initially on search
#    bucket_path: "docker-react"
    # Then name of the branch on which you need to run Travis CI
#    on:
#        branch: master
    # These variables are defined inside the Travis CI environment variables setting
    # The values of those keys is generated by creating a new user on AWS IAM setting.
#    access_key_id: $AWS_ACCESS_KEY
#    secret_access_key: $AWS_SECRET_KEY